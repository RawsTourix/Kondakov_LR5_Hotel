<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="kondakov__lr5__container__operations_8hpp" kind="file" language="C++">
    <compoundname>kondakov_lr5_container_operations.hpp</compoundname>
    <includes refid="kondakov__lr5__input__control_8h" local="yes">kondakov_lr5_input_control.h</includes>
    <includedby refid="kondakov__lr5__input__control_8h" local="yes">Kondakov_LR5_Hotel/kondakov_lr5_input_control.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp</label>
        <link refid="kondakov__lr5__container__operations_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>kondakov_lr5_def.h</label>
        <link refid="kondakov__lr5__def_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kondakov_lr5_input_control.h</label>
        <link refid="kondakov__lr5__input__control_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>kondakov_lr5_input_control.hpp</label>
        <link refid="kondakov__lr5__input__control_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>algorithm</label>
      </node>
      <node id="15">
        <label>fstream</label>
      </node>
      <node id="9">
        <label>functional</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>limits</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="16">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="8">
        <label>sstream</label>
      </node>
      <node id="14">
        <label>tuple</label>
      </node>
      <node id="10">
        <label>type_traits</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_child_care.cpp</label>
        <link refid="kondakov__lr5__child__care_8cpp"/>
      </node>
      <node id="3">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_child_care.h</label>
        <link refid="kondakov__lr5__child__care_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_child_care.hpp</label>
        <link refid="kondakov__lr5__child__care_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp</label>
        <link refid="kondakov__lr5__container__operations_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_family_room.cpp</label>
        <link refid="kondakov__lr5__family__room_8cpp"/>
      </node>
      <node id="6">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_family_room.h</label>
        <link refid="kondakov__lr5__family__room_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_family_room.hpp</label>
        <link refid="kondakov__lr5__family__room_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_input_control.cpp</label>
        <link refid="kondakov__lr5__input__control_8cpp"/>
      </node>
      <node id="2">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_input_control.h</label>
        <link refid="kondakov__lr5__input__control_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_input_control.hpp</label>
        <link refid="kondakov__lr5__input__control_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_main.cpp</label>
        <link refid="kondakov__lr5__main_8cpp"/>
      </node>
      <node id="11">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_menu_object.cpp</label>
        <link refid="kondakov__lr5__menu__object_8cpp"/>
      </node>
      <node id="10">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_menu_object.h</label>
        <link refid="kondakov__lr5__menu__object_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_menu_object.hpp</label>
        <link refid="kondakov__lr5__menu__object_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_methods.h</label>
        <link refid="kondakov__lr5__methods_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_methods.hpp</label>
        <link refid="kondakov__lr5__methods_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_room.cpp</label>
        <link refid="kondakov__lr5__room_8cpp"/>
      </node>
      <node id="20">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_room.h</label>
        <link refid="kondakov__lr5__room_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_room.hpp</label>
        <link refid="kondakov__lr5__room_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_serializer.cpp</label>
        <link refid="kondakov__lr5__serializer_8cpp"/>
      </node>
      <node id="9">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_serializer.h</label>
        <link refid="kondakov__lr5__serializer_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_serializer.hpp</label>
        <link refid="kondakov__lr5__serializer_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_standard_room.cpp</label>
        <link refid="kondakov__lr5__standard__room_8cpp"/>
      </node>
      <node id="23">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_standard_room.h</label>
        <link refid="kondakov__lr5__standard__room_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_standard_room.hpp</label>
        <link refid="kondakov__lr5__standard__room_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_suite.cpp</label>
        <link refid="kondakov__lr5__suite_8cpp"/>
      </node>
      <node id="26">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_suite.h</label>
        <link refid="kondakov__lr5__suite_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Kondakov_LR5_Hotel/kondakov_lr5_suite.hpp</label>
        <link refid="kondakov__lr5__suite_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_input_control_1_1_delimited_container_3_01_delim_00_01_container_01_6_00_01enable__if__t_e12e72f0c289026bc10ec07e7fe406c5" prot="public">InputControl::DelimitedContainer&lt; Delim, Container &amp;, enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, void &gt; &gt;</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="kondakov__lr5__container__operations_8hpp_1a780b67f65e7650b7621583a0c5f0aadb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, ostream &amp; &gt;</type>
        <definition>enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, ostream &amp; &gt; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Container &amp;strings)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>strings</declname>
        </param>
        <briefdescription>
<para>Перегрузка оператора вывода для контейнера строк </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Container</parametername>
</parameternamelist>
<parameterdescription>
<para>Тип контейнера (должен содержать строки) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>Поток вывода </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strings</parametername>
</parameternamelist>
<parameterdescription>
<para>Контейнер строк </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Поток вывода</para>
</simplesect>
Выводит элементы контейнера через запятую </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp" line="1" column="0" bodyfile="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp" bodystart="37" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="kondakov__lr5__container__operations_8hpp_1a273372d7d09179966f6d26861fd41dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, Container &gt;</type>
        <definition>enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, Container &gt; operator+</definition>
        <argsstring>(const Container &amp;lhs, const Container &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const Container &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Перегрузка оператора сложения для контейнеров строк </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Container</parametername>
</parameternamelist>
<parameterdescription>
<para>Тип контейнера (должен содержать строки) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Левый операнд </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Правый операнд </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Новый контейнер с объединёнными элементами</para>
</simplesect>
Объединяет контейнеры, исключая дубликаты </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp" line="59" column="1" bodyfile="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp" bodystart="59" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="kondakov__lr5__container__operations_8hpp_1a447cf4bccd292f53844905a5c88c7d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, Container &amp; &gt;</type>
        <definition>enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, Container &amp; &gt; operator+=</definition>
        <argsstring>(Container &amp;lhs, const Container &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>Container &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Перегрузка оператора += для контейнеров строк </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Container</parametername>
</parameternamelist>
<parameterdescription>
<para>Тип контейнера (должен содержать строки) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Левый операнд (изменяемый) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Правый операнд </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ссылка на изменённый контейнер</para>
</simplesect>
Добавляет элементы из правого операнда, исключая дубликаты </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp" line="79" column="1" bodyfile="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="kondakov__lr5__container__operations_8hpp_1a6b0fc452e51eac8ef593ecc9d2fd0137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, Container &amp; &gt;</type>
        <definition>enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, Container &amp; &gt; operator+=</definition>
        <argsstring>(Container &amp;lhs, const string &amp;str)</argsstring>
        <name>operator+=</name>
        <param>
          <type>Container &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Перегрузка оператора += для контейнера и строки </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Container</parametername>
</parameternamelist>
<parameterdescription>
<para>Тип контейнера (должен содержать строки) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Левый операнд (изменяемый) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Добавляемая строка </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ссылка на изменённый контейнер</para>
</simplesect>
Добавляет строку если её ещё нет в контейнере </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp" line="98" column="1" bodyfile="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp" bodystart="98" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="kondakov__lr5__container__operations_8hpp_1af2721b39e850a7e2bf789e2b32cca184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>char</type>
            <declname>Delim</declname>
            <defname>Delim</defname>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, istream &amp; &gt;</type>
        <definition>enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, istream &amp; &gt; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, InputControl::DelimitedContainer&lt; Delim, Container &amp; &gt; &amp;dc)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="struct_input_control_1_1_delimited_container" kindref="compound">InputControl::DelimitedContainer</ref>&lt; Delim, Container &amp; &gt; &amp;</type>
          <declname>dc</declname>
        </param>
        <briefdescription>
<para>Перегрузка оператора ввода для DelimitedContainer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Delim</parametername>
</parameternamelist>
<parameterdescription>
<para>Разделитель </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Container</parametername>
</parameternamelist>
<parameterdescription>
<para>Тип контейнера (должен содержать строки) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>Поток ввода </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dc</parametername>
</parameternamelist>
<parameterdescription>
<para>Контейнер с разделителем </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Поток ввода</para>
</simplesect>
Считывает строку и разделяет её по разделителю в контейнер </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp" line="116" column="1" bodyfile="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp" bodystart="116" bodyend="132"/>
        <references refid="namespace_input_control_1a65e26d060b726037262418808215e1b5" compoundref="kondakov__lr5__input__control_8cpp" startline="54" endline="60">InputControl::is_input_empty</references>
        <references refid="namespace_input_control_1a5df9ff92a406d7ffc174e3b3ddef8cd4" compoundref="kondakov__lr5__input__control_8hpp" startline="26" endline="50">InputControl::split</references>
        <references refid="namespace_input_control_1a58f52a08f73fe9b352d19e80d84c64ea" compoundref="kondakov__lr5__input__control_8cpp" startline="16" endline="24">InputControl::trim</references>
      </memberdef>
      <memberdef kind="function" id="kondakov__lr5__container__operations_8hpp_1a95226ada92c9fc69c4d5d6771165dcb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>char</type>
            <declname>Delim</declname>
            <defname>Delim</defname>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, Container &amp; &gt;</type>
        <definition>enable_if_t&lt; is_same_v&lt; typename Container::value_type, string &gt;, Container &amp; &gt; operator&gt;&gt;</definition>
        <argsstring>(InputControl::DelimitedContainer&lt; Delim, Container &amp; &gt; &amp;dc, const string &amp;input_line)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="struct_input_control_1_1_delimited_container" kindref="compound">InputControl::DelimitedContainer</ref>&lt; Delim, Container &amp; &gt; &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>input_line</declname>
        </param>
        <briefdescription>
<para>Перегрузка оператора &gt;&gt; для разделения строки в контейнер </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Delim</parametername>
</parameternamelist>
<parameterdescription>
<para>Разделитель </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Container</parametername>
</parameternamelist>
<parameterdescription>
<para>Тип контейнера (должен содержать строки) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dc</parametername>
</parameternamelist>
<parameterdescription>
<para>Контейнер с разделителем </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_line</parametername>
</parameternamelist>
<parameterdescription>
<para>Входная строка </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ссылка на изменённый контейнер </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp" line="144" column="1" bodyfile="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp" bodystart="144" bodyend="147"/>
        <references refid="namespace_input_control_1a5df9ff92a406d7ffc174e3b3ddef8cd4" compoundref="kondakov__lr5__input__control_8hpp" startline="26" endline="50">InputControl::split</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Операции с контейнерами строк </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Kondakov Fedor </para>
</simplesect>
<simplesect kind="date"><para>2025 </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="kondakov__lr5__container__operations_8hpp_1a780b67f65e7650b7621583a0c5f0aadb" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>KONDAKOV_LR5_CONTAINER_OPERATIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KONDAKOV_LR5_CONTAINER_OPERATIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kondakov__lr5__input__control_8h" kindref="compound">kondakov_lr5_input_control.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Delim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="22" refid="struct_input_control_1_1_delimited_container_3_01_delim_00_01_container_01_6_00_01enable__if__t_e12e72f0c289026bc10ec07e7fe406c5" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_input_control_1_1_delimited_container" kindref="compound">InputControl::DelimitedContainer</ref>&lt;Delim,<sp/>Container&amp;,<sp/>enable_if_t&lt;is_same_v&lt;typename<sp/>Container::value_type,<sp/>string&gt;,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="23" refid="struct_input_control_1_1_delimited_container_3_01_delim_00_01_container_01_6_00_01enable__if__t_e12e72f0c289026bc10ec07e7fe406c5_1a20d503e1d262d9b668bc6da532f2bf3d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Container&amp;<sp/><ref refid="struct_input_control_1_1_delimited_container_3_01_delim_00_01_container_01_6_00_01enable__if__t_e12e72f0c289026bc10ec07e7fe406c5_1a20d503e1d262d9b668bc6da532f2bf3d" kindref="member">ref</ref>;<sp/></highlight></codeline>
<codeline lineno="24" refid="struct_input_control_1_1_delimited_container_3_01_delim_00_01_container_01_6_00_01enable__if__t_e12e72f0c289026bc10ec07e7fe406c5_1a5d34f5e14f4a658a9e24f572d244058b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="struct_input_control_1_1_delimited_container_3_01_delim_00_01_container_01_6_00_01enable__if__t_e12e72f0c289026bc10ec07e7fe406c5_1a5d34f5e14f4a658a9e24f572d244058b" kindref="member">DelimitedContainer</ref>(Container&amp;<sp/>r)<sp/>:<sp/><ref refid="struct_input_control_1_1_delimited_container_3_01_delim_00_01_container_01_6_00_01enable__if__t_e12e72f0c289026bc10ec07e7fe406c5_1a20d503e1d262d9b668bc6da532f2bf3d" kindref="member">ref</ref>(r)<sp/>{}<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>enable_if_t&lt;is_same_v&lt;typename<sp/>Container::value_type,<sp/>string&gt;,<sp/>ostream&amp;&gt;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="kondakov__lr5__container__operations_8hpp_1a780b67f65e7650b7621583a0c5f0aadb" kindref="member">operator&lt;&lt;</ref>(ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>strings)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strings.empty())<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>strings.begin();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>*it;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++it;<sp/>it<sp/>!=<sp/>strings.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*it;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>enable_if_t&lt;is_same_v&lt;typename<sp/>Container::value_type,<sp/>string&gt;,<sp/>Container&gt;</highlight></codeline>
<codeline lineno="59" refid="kondakov__lr5__container__operations_8hpp_1a273372d7d09179966f6d26861fd41dcd" refkind="member"><highlight class="normal"><ref refid="kondakov__lr5__container__operations_8hpp_1a273372d7d09179966f6d26861fd41dcd" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>Container<sp/>result<sp/>=<sp/>lhs;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>str<sp/>:<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(result.begin(),<sp/>result.end(),<sp/>str)<sp/>==<sp/>result.end())<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(str);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>enable_if_t&lt;is_same_v&lt;typename<sp/>Container::value_type,<sp/>string&gt;,<sp/>Container&amp;&gt;</highlight></codeline>
<codeline lineno="79" refid="kondakov__lr5__container__operations_8hpp_1a447cf4bccd292f53844905a5c88c7d27" refkind="member"><highlight class="normal"><ref refid="kondakov__lr5__container__operations_8hpp_1a447cf4bccd292f53844905a5c88c7d27" kindref="member">operator+=</ref>(Container&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>str<sp/>:<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(lhs.begin(),<sp/>lhs.end(),<sp/>str)<sp/>==<sp/>lhs.end())<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs.push_back(str);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>enable_if_t&lt;is_same_v&lt;typename<sp/>Container::value_type,<sp/>string&gt;,<sp/>Container&amp;&gt;</highlight></codeline>
<codeline lineno="98" refid="kondakov__lr5__container__operations_8hpp_1a6b0fc452e51eac8ef593ecc9d2fd0137" refkind="member"><highlight class="normal"><ref refid="kondakov__lr5__container__operations_8hpp_1a447cf4bccd292f53844905a5c88c7d27" kindref="member">operator+=</ref>(Container&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find(lhs.begin(),<sp/>lhs.end(),<sp/>str)<sp/>==<sp/>lhs.end())<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs.push_back(str);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Delim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>enable_if_t&lt;is_same_v&lt;typename<sp/>Container::value_type,<sp/>string&gt;,<sp/>istream&amp;&gt;</highlight></codeline>
<codeline lineno="116" refid="kondakov__lr5__container__operations_8hpp_1af2721b39e850a7e2bf789e2b32cca184" refkind="member"><highlight class="normal"><ref refid="kondakov__lr5__container__operations_8hpp_1af2721b39e850a7e2bf789e2b32cca184" kindref="member">operator&gt;&gt;</ref>(istream&amp;<sp/>is,<sp/><ref refid="struct_input_control_1_1_delimited_container" kindref="compound">InputControl::DelimitedContainer&lt;Delim, Container&amp;&gt;</ref>&amp;<sp/>dc)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>input_line;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getline(is,<sp/>input_line))<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.setstate(ios::failbit);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_input_control_1a58f52a08f73fe9b352d19e80d84c64ea" kindref="member">InputControl::trim</ref>(input_line);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespace_input_control_1a65e26d060b726037262418808215e1b5" kindref="member">InputControl::is_input_empty</ref>(input_line))<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.setstate(ios::failbit);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_input_control_1a5df9ff92a406d7ffc174e3b3ddef8cd4" kindref="member">InputControl::split</ref>(input_line,<sp/>dc);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Delim,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>enable_if_t&lt;is_same_v&lt;typename<sp/>Container::value_type,<sp/>string&gt;,<sp/>Container&amp;&gt;</highlight></codeline>
<codeline lineno="144" refid="kondakov__lr5__container__operations_8hpp_1a95226ada92c9fc69c4d5d6771165dcb3" refkind="member"><highlight class="normal"><ref refid="kondakov__lr5__container__operations_8hpp_1af2721b39e850a7e2bf789e2b32cca184" kindref="member">operator&gt;&gt;</ref>(<ref refid="struct_input_control_1_1_delimited_container" kindref="compound">InputControl::DelimitedContainer&lt;Delim, Container&amp;&gt;</ref>&amp;<sp/>dc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>input_line)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_input_control_1a5df9ff92a406d7ffc174e3b3ddef8cd4" kindref="member">InputControl::split</ref>(input_line,<sp/>dc);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dc.ref;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>KONDAKOV_LR5_CONTAINER_OPERATIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Kondakov_LR5_Hotel/kondakov_lr5_container_operations.hpp"/>
  </compounddef>
</doxygen>
